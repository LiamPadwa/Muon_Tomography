#! /usr/bin/perl
# inOut_v2_windows.pl
# Windows-compatible version of the data processing script
# This code:
# 1) Reads in data files generated by the CAEN DAQ for the Tel Aviv University detector
# 2) Parses event hits (scintillator hits) that have hits on each of four ASICs
# 3) Defines a good muon - as two X and two Y coordinate hits are present
# 4) Writes the data from these hits to the output
#
# Usage:
#   perl inOut_v2_windows.pl inputDir outFilename
#   where inputDir is a directory containing the text data files of the type: NNN.data (NNN = run number)
#
# Written by Dan Levin, University of Michigan, Dec 2024
# Modified for Windows compatibility
#############################################################################

use warnings;
use strict;
use File::Spec;  # For cross-platform path handling
use File::Glob;  # For Windows-compatible globbing

# Initialize variables
my $line;
my $f1;
my $f2;
my $f3;
my $f4;
my $asic_0;
my $evc_0;
my $RUNevtimeLSB_0;
my $RUNevtime_0;
my $t0ev_0;
my $t0evns_0;
my $trig_0;
my $valid_0;
my $flag_0;
my @hit_0 = (0) x 32;  # Initialise arrays with zeros
my @adclg_0 = (0) x 32;
my @adchg_0 = (0) x 32;
my @dummy;
my $dirIn;
my $dirOut;
my $file;
my $rtfile;
my $outputFile;

# Get command line arguments
$dirIn = $ARGV[0];
$outputFile = $ARGV[1];

# Open output file without Windows line ending conversion
open RTOUT, "> $outputFile" or die("Could not open output file!");
binmode(RTOUT, ":raw");  # Use raw mode to prevent line ending conversion

# Process each .data file in the input directory
foreach $file (glob(File::Spec->catfile($dirIn, "*.data"))) {
    open(RT, $file) or die "Could not open file $file: $!";
    binmode(RT, ":raw");  # Use raw mode to prevent line ending conversion

    my @array = <RT>;
    foreach $line (@array) {
        chomp($line);
        ($f1, $f2, $f3, $f4, @dummy) = split(/;/,$line);

        my $count = 0;
        my $jc = 0;
        my @spl = split(/;/,$line);
        
        foreach my $i (@spl) {
            $count++;
            if ($count == 4 && $i eq "4") {
                $jc = 0;
                print RTOUT "1234BBBB1234, \n";  
                
                foreach my $j (@spl) {
                    $jc++;
                    if ($jc <= 4 || 
                        ($jc >= 5 && $jc <= 13) ||
                        ($jc >= 14 && $jc <= 45) ||
                        ($jc >= 78 && $jc <= 109) ||
                        ($jc >= 110 && $jc <= 118) ||
                        ($jc >= 119 && $jc <= 150) ||
                        ($jc >= 183 && $jc <= 214) ||
                        ($jc >= 215 && $jc <= 223) ||
                        ($jc >= 224 && $jc <= 255) ||
                        ($jc >= 288 && $jc <= 319) ||
                        ($jc >= 320 && $jc <= 328) ||
                        ($jc >= 329 && $jc <= 360) ||
                        ($jc >= 393 && $jc <= 424) ) {
                        print RTOUT "$j,";
                    }

                    if ($jc == 4 || $jc == 13 || $jc == 45 ||
                        $jc == 109 || $jc == 118 || $jc == 150 ||
                        $jc == 214 || $jc == 223 || $jc == 255 ||
                        $jc == 319 || $jc == 328 || $jc == 360 || 
                        $jc == 424 ) {
                        print RTOUT "\n";
                    }
                }
            }
        }
    }
    close(RT);
}
close(RTOUT);

#=============================================================================
# Data Format Documentation:
# ID_CLUSTER;CLUSTER_RUN_Timecode_ns;CLUSTER_Timecode_ns;NEventsInCluster;
#
# ASIC_0;EventCounter_0;RUN_EventTimeCodeLSB_0;RUN_EventTimecode_ns_0;T0_to_Event_Timecode_0;T0_to_Event_Timecode_ns_0;Trigger_ID_0;Validation_ID_0;Flags_0;
# HIT_0_0;... HIT_0_31;
# CHARGE_LG_0_0;... CHARGE_LG_0_31;
# CHARGE_HG_0_0;... CHARGE_HG_0_31;
#
# ASIC_1;EventCounter_1;RUN_EventTimeCodeLSB_1;RUN_EventTimecode_ns_1;T0_to_Event_Timecode_1;T0_to_Event_Timecode_ns_1;Trigger_ID_1;Validation_ID_1;Flags_1;
# HIT_1_0;... HIT_0_31;
# CHARGE_LG_1_0;... CHARGE_LG_1_31;
# CHARGE_HG_1_0;... CHARGE_HG_1_31;
#
# ASIC_2;EventCounter_2;RUN_EventTimeCodeLSB_2;RUN_EventTimecode_ns_2;T0_to_Event_Timecode_2;T0_to_Event_Timecode_ns_2;Trigger_ID_2;Validation_ID_0;Flags_2;
# HIT_2_0;... HIT_0_31;
# CHARGE_LG_2_0;... CHARGE_LG_2_31;
# CHARGE_HG_2_0;... CHARGE_HG_2_31;
#
# ASIC_3;EventCounter_3;RUN_EventTimeCodeLSB_3;RUN_EventTimecode_ns_3;T0_to_Event_Timecode_3;T0_to_Event_Timecode_ns_3;Trigger_ID_3;Validation_ID_0;Flags_3;
# HIT_3_0;... HIT_3_31;
# CHARGE_LG_3_0;... CHARGE_LG_3_31;
# CHARGE_HG_3_0;... CHARGE_HG_3_31; 