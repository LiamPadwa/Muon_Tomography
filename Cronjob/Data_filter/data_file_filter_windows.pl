#! /usr/bin/perl

# Test: pass July 6th 2025

# This code:
# 1) Reads in a data file generated by the CAEN DAQ for the Tel Aviv University detector
# 2) Parses event hits (scintillator hits) that have hits on each of four ASICs
# 3) Defines a good muon - as two X and two Y coordinate hits are present
# 4) Writes the data from these hits to the output


# Written by Dan Levin, University of Michigan, Dec 2024
# Modified to run on a single file, insted of a full directory, May 7th 2025
# Modified for Windows compatability, May 20th 2025
# Optimised for better memory hanling and faster runtime, July 6th 2025

# Usage:
#   perl data_file_filter_windows.pl inputFile outFilename
#   where inputFile is a .data file containing the text of the type: NNN.data (NNN = run number)


use strict;
use warnings;

my $fileIn = $ARGV[0] or die "Usage: perl $0 inputFile.data outputFile.data\n";
my $outputFile = $ARGV[1] or die "Usage: perl $0 inputFile.data outputFile.data\n";

die "Input file must have .data extension\n" unless $fileIn =~ /\.data$/;

open(my $in, '<:raw', $fileIn) or die "Could not open input file '$fileIn': $!";
open(my $out, '>:raw', $outputFile) or die "Could not open output file '$outputFile': $!";

my %valid_indices = map { $_ => 1 } (
    1..4, 5..13, 14..45, 78..109, 110..118, 119..150,
    183..214, 215..223, 224..255, 288..319, 320..328,
    329..360, 393..424
);

my %newline_after = map { $_ => 1 } (
    4, 13, 45, 109, 118, 150, 214, 223, 255, 319, 328, 360, 424
);

while (my $line = <$in>) {
    chomp($line);
    my @fields = split(/;/, $line);

    # Skip if the 4th field isn't a number (e.g., header line)
    next unless defined $fields[3] && $fields[3] =~ /^\d+$/ && $fields[3] == 4;

    print $out "1234BBBB1234, \n";

    my $index = 1;
    foreach my $value (@fields) {
        if ($valid_indices{$index}) {
            print $out "$value,";
            print $out "\n" if $newline_after{$index};
        }
        $index++;
    }
}

close($in);
close($out);
